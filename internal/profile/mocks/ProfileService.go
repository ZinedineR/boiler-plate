// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	domain "boiler-plate/internal/profile/domain"
	exception "boiler-plate/pkg/exception"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProfileService is an autogenerated mock type for the ProfileService type
type ProfileService struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, profile, password
func (_m *ProfileService) Auth(ctx context.Context, profile string, password string) (*domain.Profile, *exception.Exception) {
	ret := _m.Called(ctx, profile, password)

	var r0 *domain.Profile
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Profile, *exception.Exception)); ok {
		return rf(ctx, profile, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Profile); ok {
		r0 = rf(ctx, profile, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *exception.Exception); ok {
		r1 = rf(ctx, profile, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, req
func (_m *ProfileService) Create(ctx context.Context, req *domain.Profile) *exception.Exception {
	ret := _m.Called(ctx, req)

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Profile) *exception.Exception); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProfileService) Delete(ctx context.Context, id string) *exception.Exception {
	ret := _m.Called(ctx, id)

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string) *exception.Exception); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, id
func (_m *ProfileService) Detail(ctx context.Context, id string) (*domain.Profile, *exception.Exception) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Profile
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Profile, *exception.Exception)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *exception.Exception); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx
func (_m *ProfileService) Find(ctx context.Context) (*[]domain.Profile, *exception.Exception) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Profile
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Profile, *exception.Exception)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Profile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *exception.Exception); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, profile
func (_m *ProfileService) Update(ctx context.Context, id string, profile *domain.Profile) *exception.Exception {
	ret := _m.Called(ctx, id, profile)

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Profile) *exception.Exception); ok {
		r0 = rf(ctx, id, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// NewProfileService creates a new instance of ProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileService {
	mock := &ProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
