// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ms-batch/internal/template/domain"
	db "ms-batch/pkg/db"

	gatewaydomain "ms-batch/internal/gateway/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateApplicationOwner provides a mock function with given fields: ctx, model
func (_m *Repository) CreateApplicationOwner(ctx context.Context, model *domain.ApplicationOwner) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ApplicationOwner) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAssignee provides a mock function with given fields: ctx, model
func (_m *Repository) CreateAssignee(ctx context.Context, model *domain.Assignee) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Assignee) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGotifyData provides a mock function with given fields: ctx, model
func (_m *Repository) CreateGotifyData(ctx context.Context, model *gatewaydomain.GotifyData) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gatewaydomain.GotifyData) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMailLayout provides a mock function with given fields: ctx, model
func (_m *Repository) CreateMailLayout(ctx context.Context, model *domain.MailLayout) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MailLayout) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMailTemplate provides a mock function with given fields: ctx, model
func (_m *Repository) CreateMailTemplate(ctx context.Context, model *domain.MailTemplate) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MailTemplate) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNotificationList provides a mock function with given fields: ctx, model
func (_m *Repository) CreateNotificationList(ctx context.Context, model *domain.NotificationList) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.NotificationList) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNotificationLogs provides a mock function with given fields: ctx, model
func (_m *Repository) CreateNotificationLogs(ctx context.Context, model *domain.NotificationLogs) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.NotificationLogs) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNotificationTemplate provides a mock function with given fields: ctx, model
func (_m *Repository) CreateNotificationTemplate(ctx context.Context, model *domain.NotificationTemplate) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.NotificationTemplate) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSMSLog provides a mock function with given fields: ctx, model
func (_m *Repository) CreateSMSLog(ctx context.Context, model *domain.SMSLog) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SMSLog) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSMSTemplate provides a mock function with given fields: ctx, model
func (_m *Repository) CreateSMSTemplate(ctx context.Context, model *domain.SMSTemplate) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SMSTemplate) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSentLogs provides a mock function with given fields: ctx, model
func (_m *Repository) CreateSentLogs(ctx context.Context, model *domain.SentLogs) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SentLogs) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTag provides a mock function with given fields: ctx, model
func (_m *Repository) CreateTag(ctx context.Context, model *domain.Tag) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Tag) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteApplicationOwner provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteApplicationOwner(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssignee provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteAssignee(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMailLayout provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteMailLayout(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMailTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteMailTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationList provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteNotificationList(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteNotificationTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSMSTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteSMSTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteTag(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindApplicationOwner provides a mock function with given fields: ctx
func (_m *Repository) FindApplicationOwner(ctx context.Context) (*[]domain.ApplicationOwner, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.ApplicationOwner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.ApplicationOwner, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.ApplicationOwner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ApplicationOwner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAssignee provides a mock function with given fields: ctx
func (_m *Repository) FindAssignee(ctx context.Context) (*[]domain.Assignee, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Assignee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Assignee, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Assignee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Assignee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAssigneesByName provides a mock function with given fields: ctx, search
func (_m *Repository) FindAssigneesByName(ctx context.Context, search string) (*[]domain.Assignee, error) {
	ret := _m.Called(ctx, search)

	var r0 *[]domain.Assignee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]domain.Assignee, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Assignee); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Assignee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindGotifyAppToken provides a mock function with given fields: ctx
func (_m *Repository) FindGotifyAppToken(ctx context.Context) (*[]gatewaydomain.GotifyData, error) {
	ret := _m.Called(ctx)

	var r0 *[]gatewaydomain.GotifyData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]gatewaydomain.GotifyData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]gatewaydomain.GotifyData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]gatewaydomain.GotifyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindGotifyData provides a mock function with given fields: ctx
func (_m *Repository) FindGotifyData(ctx context.Context) (*[]gatewaydomain.GotifyData, error) {
	ret := _m.Called(ctx)

	var r0 *[]gatewaydomain.GotifyData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]gatewaydomain.GotifyData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]gatewaydomain.GotifyData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]gatewaydomain.GotifyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMailLayout provides a mock function with given fields: ctx, limit, page, column, name
func (_m *Repository) FindMailLayout(ctx context.Context, limit int64, page int64, column string, name string) (*[]domain.MailLayout, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, limit, page, column, name)

	var r0 *[]domain.MailLayout
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*[]domain.MailLayout, *db.MongoPaginate, error)); ok {
		return rf(ctx, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *[]domain.MailLayout); ok {
		r0 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.MailLayout)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string, string) error); ok {
		r2 = rf(ctx, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindMailTemplate provides a mock function with given fields: ctx, limit, page, column, name
func (_m *Repository) FindMailTemplate(ctx context.Context, limit int64, page int64, column string, name string) (*[]domain.MailTemplate, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, limit, page, column, name)

	var r0 *[]domain.MailTemplate
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*[]domain.MailTemplate, *db.MongoPaginate, error)); ok {
		return rf(ctx, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *[]domain.MailTemplate); ok {
		r0 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.MailTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string, string) error); ok {
		r2 = rf(ctx, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindNotificationList provides a mock function with given fields: ctx, limit, page, column, name
func (_m *Repository) FindNotificationList(ctx context.Context, limit int64, page int64, column string, name string) (*[]domain.NotificationList, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, limit, page, column, name)

	var r0 *[]domain.NotificationList
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*[]domain.NotificationList, *db.MongoPaginate, error)); ok {
		return rf(ctx, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *[]domain.NotificationList); ok {
		r0 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.NotificationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string, string) error); ok {
		r2 = rf(ctx, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindNotificationListByOwner provides a mock function with given fields: ctx, id, owner
func (_m *Repository) FindNotificationListByOwner(ctx context.Context, id string, owner string) (*[]domain.NotificationList, error) {
	ret := _m.Called(ctx, id, owner)

	var r0 *[]domain.NotificationList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*[]domain.NotificationList, error)); ok {
		return rf(ctx, id, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *[]domain.NotificationList); ok {
		r0 = rf(ctx, id, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.NotificationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotificationLogs provides a mock function with given fields: ctx, to
func (_m *Repository) FindNotificationLogs(ctx context.Context, to string) (*[]domain.NotificationLogs, error) {
	ret := _m.Called(ctx, to)

	var r0 *[]domain.NotificationLogs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]domain.NotificationLogs, error)); ok {
		return rf(ctx, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.NotificationLogs); ok {
		r0 = rf(ctx, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.NotificationLogs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotificationTemplate provides a mock function with given fields: ctx, limit, page, column, name
func (_m *Repository) FindNotificationTemplate(ctx context.Context, limit int64, page int64, column string, name string) (*[]domain.NotificationTemplate, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, limit, page, column, name)

	var r0 *[]domain.NotificationTemplate
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*[]domain.NotificationTemplate, *db.MongoPaginate, error)); ok {
		return rf(ctx, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *[]domain.NotificationTemplate); ok {
		r0 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.NotificationTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string, string) error); ok {
		r2 = rf(ctx, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOneApplicationOwner provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneApplicationOwner(ctx context.Context, id string) (*domain.ApplicationOwner, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.ApplicationOwner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ApplicationOwner, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ApplicationOwner); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApplicationOwner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneApplicationOwnerByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneApplicationOwnerByName(ctx context.Context, name string) (*domain.ApplicationOwner, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.ApplicationOwner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ApplicationOwner, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ApplicationOwner); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApplicationOwner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneAssignee provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneAssignee(ctx context.Context, id string) (*domain.Assignee, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Assignee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Assignee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Assignee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Assignee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneAssigneeByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneAssigneeByName(ctx context.Context, name string) (*domain.Assignee, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.Assignee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Assignee, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Assignee); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Assignee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneGotifyDataByAppName provides a mock function with given fields: ctx, appname, email
func (_m *Repository) FindOneGotifyDataByAppName(ctx context.Context, appname string, email string) (*gatewaydomain.GotifyData, error) {
	ret := _m.Called(ctx, appname, email)

	var r0 *gatewaydomain.GotifyData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gatewaydomain.GotifyData, error)); ok {
		return rf(ctx, appname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gatewaydomain.GotifyData); ok {
		r0 = rf(ctx, appname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatewaydomain.GotifyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneGotifyDataByClient provides a mock function with given fields: ctx, token
func (_m *Repository) FindOneGotifyDataByClient(ctx context.Context, token string) (*gatewaydomain.GotifyData, error) {
	ret := _m.Called(ctx, token)

	var r0 *gatewaydomain.GotifyData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gatewaydomain.GotifyData, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gatewaydomain.GotifyData); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatewaydomain.GotifyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneGotifyDataByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneGotifyDataByName(ctx context.Context, name string) (*gatewaydomain.GotifyData, error) {
	ret := _m.Called(ctx, name)

	var r0 *gatewaydomain.GotifyData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gatewaydomain.GotifyData, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gatewaydomain.GotifyData); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatewaydomain.GotifyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneMailLayout provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneMailLayout(ctx context.Context, id string) (*domain.MailLayout, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.MailLayout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MailLayout, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MailLayout); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MailLayout)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneMailLayoutByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) FindOneMailLayoutByTitle(ctx context.Context, title string) (*domain.MailLayout, error) {
	ret := _m.Called(ctx, title)

	var r0 *domain.MailLayout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MailLayout, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MailLayout); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MailLayout)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneMailTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneMailTemplate(ctx context.Context, id string) (*domain.MailTemplate, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.MailTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MailTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MailTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MailTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneMailTemplateByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneMailTemplateByName(ctx context.Context, name string) (*domain.MailTemplate, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.MailTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MailTemplate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MailTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MailTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneNotificationList provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneNotificationList(ctx context.Context, id string) (*domain.NotificationList, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.NotificationList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.NotificationList, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.NotificationList); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneNotificationListByMailTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneNotificationListByMailTemplate(ctx context.Context, id string) (*domain.NotificationList, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.NotificationList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.NotificationList, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.NotificationList); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneNotificationListByName provides a mock function with given fields: ctx, code, title
func (_m *Repository) FindOneNotificationListByName(ctx context.Context, code string, title string) (*domain.NotificationList, error) {
	ret := _m.Called(ctx, code, title)

	var r0 *domain.NotificationList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.NotificationList, error)); ok {
		return rf(ctx, code, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.NotificationList); ok {
		r0 = rf(ctx, code, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneNotificationTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneNotificationTemplate(ctx context.Context, id string) (*domain.NotificationTemplate, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.NotificationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.NotificationTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.NotificationTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneNotificationTemplateByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneNotificationTemplateByName(ctx context.Context, name string) (*domain.NotificationTemplate, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.NotificationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.NotificationTemplate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.NotificationTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneSMSTemplate provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneSMSTemplate(ctx context.Context, id string) (*domain.SMSTemplate, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.SMSTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.SMSTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.SMSTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SMSTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneSMSTemplateByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneSMSTemplateByName(ctx context.Context, name string) (*domain.SMSTemplate, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.SMSTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.SMSTemplate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.SMSTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SMSTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneSentLogs provides a mock function with given fields: ctx, to
func (_m *Repository) FindOneSentLogs(ctx context.Context, to string) (*[]domain.SentLogs, error) {
	ret := _m.Called(ctx, to)

	var r0 *[]domain.SentLogs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]domain.SentLogs, error)); ok {
		return rf(ctx, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.SentLogs); ok {
		r0 = rf(ctx, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.SentLogs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneTag provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneTag(ctx context.Context, id string) (*domain.Tag, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Tag, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneTagByName provides a mock function with given fields: ctx, name
func (_m *Repository) FindOneTagByName(ctx context.Context, name string) (*domain.Tag, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Tag, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Tag); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSMSTemplate provides a mock function with given fields: ctx, limit, page, column, name
func (_m *Repository) FindSMSTemplate(ctx context.Context, limit int64, page int64, column string, name string) (*[]domain.SMSTemplate, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, limit, page, column, name)

	var r0 *[]domain.SMSTemplate
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*[]domain.SMSTemplate, *db.MongoPaginate, error)); ok {
		return rf(ctx, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *[]domain.SMSTemplate); ok {
		r0 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.SMSTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string, string) error); ok {
		r2 = rf(ctx, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindSentLogs provides a mock function with given fields: ctx, from, to, limit, page, column, name
func (_m *Repository) FindSentLogs(ctx context.Context, from time.Time, to time.Time, limit int64, page int64, column string, name string) (*[]domain.SentLogs, *db.MongoPaginate, error) {
	ret := _m.Called(ctx, from, to, limit, page, column, name)

	var r0 *[]domain.SentLogs
	var r1 *db.MongoPaginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int64, int64, string, string) (*[]domain.SentLogs, *db.MongoPaginate, error)); ok {
		return rf(ctx, from, to, limit, page, column, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int64, int64, string, string) *[]domain.SentLogs); ok {
		r0 = rf(ctx, from, to, limit, page, column, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.SentLogs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int64, int64, string, string) *db.MongoPaginate); ok {
		r1 = rf(ctx, from, to, limit, page, column, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.MongoPaginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time, time.Time, int64, int64, string, string) error); ok {
		r2 = rf(ctx, from, to, limit, page, column, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindTag provides a mock function with given fields: ctx
func (_m *Repository) FindTag(ctx context.Context) (*[]domain.Tag, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Tag, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Tag); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTagsByName provides a mock function with given fields: ctx, search
func (_m *Repository) FindTagsByName(ctx context.Context, search string) (*[]domain.Tag, error) {
	ret := _m.Called(ctx, search)

	var r0 *[]domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]domain.Tag, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Tag); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadNotificationLogs provides a mock function with given fields: ctx, ids
func (_m *Repository) ReadNotificationLogs(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplicationOwner provides a mock function with given fields: ctx, id, update, model
func (_m *Repository) UpdateApplicationOwner(ctx context.Context, id string, update string, model *domain.ApplicationOwner) error {
	ret := _m.Called(ctx, id, update, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.ApplicationOwner) error); ok {
		r0 = rf(ctx, id, update, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAssignee provides a mock function with given fields: ctx, id, update, model
func (_m *Repository) UpdateAssignee(ctx context.Context, id string, update string, model *domain.Assignee) error {
	ret := _m.Called(ctx, id, update, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.Assignee) error); ok {
		r0 = rf(ctx, id, update, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMailLayout provides a mock function with given fields: ctx, id, model
func (_m *Repository) UpdateMailLayout(ctx context.Context, id string, model *domain.MailLayout) error {
	ret := _m.Called(ctx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.MailLayout) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMailTemplate provides a mock function with given fields: ctx, id, model
func (_m *Repository) UpdateMailTemplate(ctx context.Context, id string, model *domain.MailTemplate) error {
	ret := _m.Called(ctx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.MailTemplate) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNotificationList provides a mock function with given fields: ctx, id, model
func (_m *Repository) UpdateNotificationList(ctx context.Context, id string, model *domain.NotificationList) error {
	ret := _m.Called(ctx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.NotificationList) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNotificationTemplate provides a mock function with given fields: ctx, id, model
func (_m *Repository) UpdateNotificationTemplate(ctx context.Context, id string, model *domain.NotificationTemplate) error {
	ret := _m.Called(ctx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.NotificationTemplate) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSMSTemplate provides a mock function with given fields: ctx, id, model
func (_m *Repository) UpdateSMSTemplate(ctx context.Context, id string, model *domain.SMSTemplate) error {
	ret := _m.Called(ctx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SMSTemplate) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTag provides a mock function with given fields: ctx, id, update, model
func (_m *Repository) UpdateTag(ctx context.Context, id string, update string, model *domain.Tag) error {
	ret := _m.Called(ctx, id, update, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.Tag) error); ok {
		r0 = rf(ctx, id, update, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
