// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	domain "boiler-plate/internal/profile/domain"
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, tx, profile, password
func (_m *ProfileRepository) Auth(ctx context.Context, tx *gorm.DB, profile string, password string) (*domain.Profile, error) {
	ret := _m.Called(ctx, tx, profile, password)

	var r0 *domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string) (*domain.Profile, error)); ok {
		return rf(ctx, tx, profile, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string) *domain.Profile); ok {
		r0 = rf(ctx, tx, profile, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string, string) error); ok {
		r1 = rf(ctx, tx, profile, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, tx, model
func (_m *ProfileRepository) Create(ctx context.Context, tx *gorm.DB, model *domain.Profile) error {
	ret := _m.Called(ctx, tx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *domain.Profile) error); ok {
		r0 = rf(ctx, tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tx, key
func (_m *ProfileRepository) Delete(ctx context.Context, tx *gorm.DB, key int) error {
	ret := _m.Called(ctx, tx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) error); ok {
		r0 = rf(ctx, tx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, tx, id
func (_m *ProfileRepository) Detail(ctx context.Context, tx *gorm.DB, id int) (*domain.Profile, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) (*domain.Profile, error)); ok {
		return rf(ctx, tx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) *domain.Profile); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, tx
func (_m *ProfileRepository) Find(ctx context.Context, tx *gorm.DB) (*[]domain.Profile, error) {
	ret := _m.Called(ctx, tx)

	var r0 *[]domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) (*[]domain.Profile, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) *[]domain.Profile); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, id, model
func (_m *ProfileRepository) Update(ctx context.Context, tx *gorm.DB, id int, model *domain.Profile) error {
	ret := _m.Called(ctx, tx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, *domain.Profile) error); ok {
		r0 = rf(ctx, tx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProfileRepository creates a new instance of ProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileRepository {
	mock := &ProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
